"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Buffers = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Buffers = /*#__PURE__*/function () {
  function Buffers() {
    _classCallCheck(this, Buffers);
  }

  _createClass(Buffers, null, [{
    key: "moveFromTypedArray",
    value: function moveFromTypedArray(typedArray) {
      return Buffer.from(typedArray.buffer);
    }
  }, {
    key: "copyFromTypedArray",
    value: function copyFromTypedArray(typedArray) {
      return Buffer.from(typedArray);
    }
  }, {
    key: "fromString",
    value: function fromString(str) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';
      return Buffer.from(str, encoding);
    }
  }, {
    key: "toString",
    value: function toString(buffer) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';
      return buffer.toString(encoding);
    }
  }, {
    key: "copyToArrayBuffer",
    value: function copyToArrayBuffer(nodeBuffer) {
      return nodeBuffer.buffer.slice(nodeBuffer.byteOffset, nodeBuffer.byteOffset + nodeBuffer.byteLength);
    }
  }, {
    key: "moveToArrayBuffer",
    value: function moveToArrayBuffer(nodeBuffer) {
      if (nodeBuffer.length === nodeBuffer.buffer.byteLength) {
        return nodeBuffer.buffer;
      }

      return Buffers.copyToArrayBuffer(nodeBuffer);
    }
  }, {
    key: "copyToUint8Array",
    value: function copyToUint8Array(nodeBuffer) {
      return new Uint8Array(Buffers.copyToArrayBuffer(nodeBuffer));
    }
  }, {
    key: "moveToUint8Array",
    value: function moveToUint8Array(nodeBuffer) {
      return new Uint8Array(Buffers.moveToArrayBuffer(nodeBuffer));
    }
  }]);

  return Buffers;
}();

exports.Buffers = Buffers;
//# sourceMappingURL=Buffers.js.map