{"version":3,"sources":["../source/Buffers.ts"],"names":["Buffers","typedArray","Buffer","from","buffer","str","encoding","toString","nodeBuffer","slice","byteOffset","byteLength","length","copyToArrayBuffer","Uint8Array","moveToArrayBuffer"],"mappings":";;;;;;;;;;;;;IASMA,O;;;;;;;WACJ,4BAA2BC,UAA3B,EAA2D;AACzD,aAAOC,MAAM,CAACC,IAAP,CAAYF,UAAU,CAACG,MAAvB,CAAP;AACD;;;WAED,4BAA2BH,UAA3B,EAA2D;AACzD,aAAOC,MAAM,CAACC,IAAP,CAAYF,UAAZ,CAAP;AACD;;;WAED,oBAAmBI,GAAnB,EAAqE;AAAA,UAArCC,QAAqC,uEAAhB,MAAgB;AACnE,aAAOJ,MAAM,CAACC,IAAP,CAAYE,GAAZ,EAAiBC,QAAjB,CAAP;AACD;;;WAED,kBAAiBF,MAAjB,EAA8D;AAAA,UAA7BE,QAA6B,uEAAR,MAAQ;AAC5D,aAAOF,MAAM,CAACG,QAAP,CAAgBD,QAAhB,CAAP;AACD;;;WAED,2BAA0BE,UAA1B,EAA2D;AACzD,aAAOA,UAAU,CAACJ,MAAX,CAAkBK,KAAlB,CACLD,UAAU,CAACE,UADN,EAELF,UAAU,CAACE,UAAX,GAAwBF,UAAU,CAACG,UAF9B,CAAP;AAGD;;;WAED,2BAA0BH,UAA1B,EAA2D;AACzD,UAAIA,UAAU,CAACI,MAAX,KAAsBJ,UAAU,CAACJ,MAAX,CAAkBO,UAA5C,EAAwD;AACtD,eAAOH,UAAU,CAACJ,MAAlB;AACD;;AACD,aAAOJ,OAAO,CAACa,iBAAR,CAA0BL,UAA1B,CAAP;AACD;;;WAED,0BAAyBA,UAAzB,EAAyD;AACvD,aAAO,IAAIM,UAAJ,CAAed,OAAO,CAACa,iBAAR,CAA0BL,UAA1B,CAAf,CAAP;AACD;;;WAED,0BAAyBA,UAAzB,EAAyD;AACvD,aAAO,IAAIM,UAAJ,CAAed,OAAO,CAACe,iBAAR,CAA0BP,UAA1B,CAAf,CAAP;AACD","sourcesContent":["import type { Encoding } from './Encoding'\ntype TypedArray =\n  Uint8Array |\n  Uint16Array |\n  Uint32Array |\n  Int8Array |\n  Int16Array |\n  Int32Array\n\nclass Buffers {\n  static moveFromTypedArray (typedArray: TypedArray): Buffer {\n    return Buffer.from(typedArray.buffer)\n  }\n\n  static copyFromTypedArray (typedArray: TypedArray): Buffer {\n    return Buffer.from(typedArray)\n  }\n\n  static fromString (str: string, encoding: Encoding = 'utf8'): Buffer {\n    return Buffer.from(str, encoding)\n  }\n\n  static toString (buffer: Buffer, encoding: Encoding = 'utf8') {\n    return buffer.toString(encoding)\n  }\n\n  static copyToArrayBuffer (nodeBuffer: Buffer): ArrayBuffer {\n    return nodeBuffer.buffer.slice(\n      nodeBuffer.byteOffset,\n      nodeBuffer.byteOffset + nodeBuffer.byteLength)\n  }\n\n  static moveToArrayBuffer (nodeBuffer: Buffer): ArrayBuffer {\n    if (nodeBuffer.length === nodeBuffer.buffer.byteLength) {\n      return nodeBuffer.buffer\n    }\n    return Buffers.copyToArrayBuffer(nodeBuffer)\n  }\n\n  static copyToUint8Array (nodeBuffer: Buffer): Uint8Array {\n    return new Uint8Array(Buffers.copyToArrayBuffer(nodeBuffer))\n  }\n\n  static moveToUint8Array (nodeBuffer: Buffer): Uint8Array {\n    return new Uint8Array(Buffers.moveToArrayBuffer(nodeBuffer))\n  }\n}\n\nexport { Buffers }\n"],"file":"Buffers.js"}