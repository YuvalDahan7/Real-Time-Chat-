{"version":3,"file":"buffers.min.js","sources":["../source/Buffers.ts","../source/TypedArrays.ts"],"sourcesContent":["import type { Encoding } from './Encoding'\ntype TypedArray =\n  Uint8Array |\n  Uint16Array |\n  Uint32Array |\n  Int8Array |\n  Int16Array |\n  Int32Array\n\nclass Buffers {\n  static moveFromTypedArray (typedArray: TypedArray): Buffer {\n    return Buffer.from(typedArray.buffer)\n  }\n\n  static copyFromTypedArray (typedArray: TypedArray): Buffer {\n    return Buffer.from(typedArray)\n  }\n\n  static fromString (str: string, encoding: Encoding = 'utf8'): Buffer {\n    return Buffer.from(str, encoding)\n  }\n\n  static toString (buffer: Buffer, encoding: Encoding = 'utf8') {\n    return buffer.toString(encoding)\n  }\n\n  static copyToArrayBuffer (nodeBuffer: Buffer): ArrayBuffer {\n    return nodeBuffer.buffer.slice(\n      nodeBuffer.byteOffset,\n      nodeBuffer.byteOffset + nodeBuffer.byteLength)\n  }\n\n  static moveToArrayBuffer (nodeBuffer: Buffer): ArrayBuffer {\n    if (nodeBuffer.length === nodeBuffer.buffer.byteLength) {\n      return nodeBuffer.buffer\n    }\n    return Buffers.copyToArrayBuffer(nodeBuffer)\n  }\n\n  static copyToUint8Array (nodeBuffer: Buffer): Uint8Array {\n    return new Uint8Array(Buffers.copyToArrayBuffer(nodeBuffer))\n  }\n\n  static moveToUint8Array (nodeBuffer: Buffer): Uint8Array {\n    return new Uint8Array(Buffers.moveToArrayBuffer(nodeBuffer))\n  }\n}\n\nexport { Buffers }\n","import { Buffers } from './Buffers'\nimport type { Encoding } from './Encoding'\n\nclass TypedArrays {\n  static string2ab (str: string, encoding: Encoding = 'utf8'): ArrayBuffer {\n    const buffer = Buffer.from(str, encoding)\n    return Buffers.copyToArrayBuffer(buffer)\n  }\n\n  static ab2string (ab: ArrayBuffer, encoding: Encoding = 'utf8'): string {\n    return Buffer.from(ab).toString(encoding)\n  }\n\n  static string2Uint8Array (str: string, encoding: Encoding = 'utf8'): Uint8Array {\n    const buffer = Buffer.from(str, encoding)\n    return Buffers.copyToUint8Array(buffer)\n  }\n\n  static uint8Array2string (arr: Uint8Array, encoding: Encoding = 'utf8'): string {\n    return Buffer.from(arr).toString(encoding)\n  }\n}\n\nexport { TypedArrays }\n"],"names":["Buffers","moveFromTypedArray","typedArray","Buffer","from","buffer","copyFromTypedArray","fromString","str","encoding","toString","copyToArrayBuffer","nodeBuffer","slice","byteOffset","byteLength","moveToArrayBuffer","length","copyToUint8Array","Uint8Array","moveToUint8Array","string2ab","ab2string","ab","string2Uint8Array","uint8Array2string","arr"],"mappings":"2CASMA,EACJC,0BAA2BC,GACzB,OAAOC,OAAOC,KAAKF,EAAWG,QAGhCC,0BAA2BJ,GACzB,OAAOC,OAAOC,KAAKF,GAGrBK,kBAAmBC,EAAaC,EAAqB,QACnD,OAAON,OAAOC,KAAKI,EAAKC,GAG1BC,gBAAiBL,EAAgBI,EAAqB,QACpD,OAAOJ,EAAOK,SAASD,GAGzBE,yBAA0BC,GACxB,OAAOA,EAAWP,OAAOQ,MACvBD,EAAWE,WACXF,EAAWE,WAAaF,EAAWG,YAGvCC,yBAA0BJ,GACxB,OAAIA,EAAWK,SAAWL,EAAWP,OAAOU,WACnCH,EAAWP,OAEbL,EAAQW,kBAAkBC,GAGnCM,wBAAyBN,GACvB,OAAO,IAAIO,WAAWnB,EAAQW,kBAAkBC,IAGlDQ,wBAAyBR,GACvB,OAAO,IAAIO,WAAWnB,EAAQgB,kBAAkBJ,4CCxClDS,iBAAkBb,EAAaC,EAAqB,QAC5CJ,EAASF,OAAOC,KAAKI,EAAKC,GAChC,OAAOT,EAAQW,kBAAkBN,GAGnCiB,iBAAkBC,EAAiBd,EAAqB,QACtD,OAAON,OAAOC,KAAKmB,GAAIb,SAASD,GAGlCe,yBAA0BhB,EAAaC,EAAqB,QACpDJ,EAASF,OAAOC,KAAKI,EAAKC,GAChC,OAAOT,EAAQkB,iBAAiBb,GAGlCoB,yBAA0BC,EAAiBjB,EAAqB,QAC9D,OAAON,OAAOC,KAAKsB,GAAKhB,SAASD"}