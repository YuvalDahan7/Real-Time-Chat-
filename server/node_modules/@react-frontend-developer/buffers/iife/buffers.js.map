{"version":3,"file":"buffers.js","sources":["../source/Buffers.ts","../source/TypedArrays.ts"],"sourcesContent":["import type { Encoding } from './Encoding'\ntype TypedArray =\n  Uint8Array |\n  Uint16Array |\n  Uint32Array |\n  Int8Array |\n  Int16Array |\n  Int32Array\n\nclass Buffers {\n  static moveFromTypedArray (typedArray: TypedArray): Buffer {\n    return Buffer.from(typedArray.buffer)\n  }\n\n  static copyFromTypedArray (typedArray: TypedArray): Buffer {\n    return Buffer.from(typedArray)\n  }\n\n  static fromString (str: string, encoding: Encoding = 'utf8'): Buffer {\n    return Buffer.from(str, encoding)\n  }\n\n  static toString (buffer: Buffer, encoding: Encoding = 'utf8') {\n    return buffer.toString(encoding)\n  }\n\n  static copyToArrayBuffer (nodeBuffer: Buffer): ArrayBuffer {\n    return nodeBuffer.buffer.slice(\n      nodeBuffer.byteOffset,\n      nodeBuffer.byteOffset + nodeBuffer.byteLength)\n  }\n\n  static moveToArrayBuffer (nodeBuffer: Buffer): ArrayBuffer {\n    if (nodeBuffer.length === nodeBuffer.buffer.byteLength) {\n      return nodeBuffer.buffer\n    }\n    return Buffers.copyToArrayBuffer(nodeBuffer)\n  }\n\n  static copyToUint8Array (nodeBuffer: Buffer): Uint8Array {\n    return new Uint8Array(Buffers.copyToArrayBuffer(nodeBuffer))\n  }\n\n  static moveToUint8Array (nodeBuffer: Buffer): Uint8Array {\n    return new Uint8Array(Buffers.moveToArrayBuffer(nodeBuffer))\n  }\n}\n\nexport { Buffers }\n","import { Buffers } from './Buffers'\nimport type { Encoding } from './Encoding'\n\nclass TypedArrays {\n  static string2ab (str: string, encoding: Encoding = 'utf8'): ArrayBuffer {\n    const buffer = Buffer.from(str, encoding)\n    return Buffers.copyToArrayBuffer(buffer)\n  }\n\n  static ab2string (ab: ArrayBuffer, encoding: Encoding = 'utf8'): string {\n    return Buffer.from(ab).toString(encoding)\n  }\n\n  static string2Uint8Array (str: string, encoding: Encoding = 'utf8'): Uint8Array {\n    const buffer = Buffer.from(str, encoding)\n    return Buffers.copyToUint8Array(buffer)\n  }\n\n  static uint8Array2string (arr: Uint8Array, encoding: Encoding = 'utf8'): string {\n    return Buffer.from(arr).toString(encoding)\n  }\n}\n\nexport { TypedArrays }\n"],"names":[],"mappings":";;;IASA,MAAM,OAAO,CAAA;QACX,OAAO,kBAAkB,CAAE,UAAsB,EAAA;YAC/C,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;SACtC;QAED,OAAO,kBAAkB,CAAE,UAAsB,EAAA;IAC/C,QAAA,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SAC/B;IAED,IAAA,OAAO,UAAU,CAAE,GAAW,EAAE,WAAqB,MAAM,EAAA;YACzD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;SAClC;IAED,IAAA,OAAO,QAAQ,CAAE,MAAc,EAAE,WAAqB,MAAM,EAAA;IAC1D,QAAA,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;SACjC;QAED,OAAO,iBAAiB,CAAE,UAAkB,EAAA;IAC1C,QAAA,OAAO,UAAU,CAAC,MAAM,CAAC,KAAK,CAC5B,UAAU,CAAC,UAAU,EACrB,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC,CAAA;SACjD;QAED,OAAO,iBAAiB,CAAE,UAAkB,EAAA;YAC1C,IAAI,UAAU,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,CAAC,UAAU,EAAE;gBACtD,OAAO,UAAU,CAAC,MAAM,CAAA;IACzB,SAAA;IACD,QAAA,OAAO,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAA;SAC7C;QAED,OAAO,gBAAgB,CAAE,UAAkB,EAAA;YACzC,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAA;SAC7D;QAED,OAAO,gBAAgB,CAAE,UAAkB,EAAA;YACzC,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAA;SAC7D;IACF;;IC3CD,MAAM,WAAW,CAAA;IACf,IAAA,OAAO,SAAS,CAAE,GAAW,EAAE,WAAqB,MAAM,EAAA;YACxD,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;IACzC,QAAA,OAAO,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;SACzC;IAED,IAAA,OAAO,SAAS,CAAE,EAAe,EAAE,WAAqB,MAAM,EAAA;YAC5D,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;SAC1C;IAED,IAAA,OAAO,iBAAiB,CAAE,GAAW,EAAE,WAAqB,MAAM,EAAA;YAChE,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;IACzC,QAAA,OAAO,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAA;SACxC;IAED,IAAA,OAAO,iBAAiB,CAAE,GAAe,EAAE,WAAqB,MAAM,EAAA;YACpE,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;SAC3C;IACF;;;;;;;;;;;;;"}